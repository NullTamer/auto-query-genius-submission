// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lkevpnotoqmyeiasbeqt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxrZXZwbm90b3FteWVpYXNiZXF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxMTcwODAsImV4cCI6MjA1NTY5MzA4MH0.lq7GzdVJEA1LbVasQRDyz80CHjFuqXtrfpRWmaEGMu8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Saves a job posting to the user's saved jobs
 */
export async function saveJobPosting(jobData: {
  title: string;
  company?: string;
  url: string;
  snippet?: string;
  location?: string;
  source: string;
  // Adding candidate-specific fields
  skills?: string[];
  education?: string;
  experienceLevel?: string;
  lastActive?: string;
  connections?: number;
  profileCompleteness?: number;
  // Keep these fields for backward compatibility
  salary?: string;
  jobType?: string;
  date?: string;
}) {
  const { data: { session } } = await supabase.auth.getSession();
  
  if (!session) {
    throw new Error("User not authenticated");
  }
  
  // Convert skills array to string if present
  const skillsString = jobData.skills ? jobData.skills.join(', ') : undefined;
  
  const { data, error } = await supabase
    .from('job_postings')
    .insert({
      title: jobData.title,
      content: jobData.snippet,
      description: jobData.snippet,
      posting_url: jobData.url,
      source_id: 1, // Default source ID
      is_public: false,
      status: 'pending' // Changed from 'saved' to 'pending' to match allowed enum values
    })
    .select();
  
  if (error) throw error;
  return data;
}

/**
 * Toggles dark mode for the current user
 */
export async function toggleDarkMode(isDarkMode: boolean) {
  // Apply dark mode to document
  if (isDarkMode) {
    document.documentElement.classList.add('dark');
  } else {
    document.documentElement.classList.remove('dark');
  }
  
  // Save preference to local storage
  localStorage.setItem('darkMode', isDarkMode ? 'dark' : 'light');
  
  // Optionally save to user profile if logged in
  const { data: { session } } = await supabase.auth.getSession();
  
  if (session) {
    // If user is logged in, save preference to their profile
    await supabase
      .from('profiles')
      .update({ 
        // This assumes you have or will add a theme_preference column
        // If the column doesn't exist yet, this will be ignored 
      })
      .eq('id', session.user.id);
  }
  
  return { success: true, darkMode: isDarkMode };
}
